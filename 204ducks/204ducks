#!/usr/bin/env python3

import sys
import math

def proba(a , t):
    res = a * math.exp(-t) + (4 - 3 * a) * math.exp(-2 * t) + (2 * a - 4) * math.exp(-4 * t)
    return (res)

def mProba(a , t):
    res = -a * math.exp(-t) - (4 - 3 * a) / 2 * math.exp(-2 * t) - (2 * a - 4) / 4 * math.exp(-4 * t)
    return (res)

def esperance(a):
    time = 0
    res = 0

    while (time < 50):
        res += proba(a, time) * time
        time += 0.001
    res /= 1000
    res += 0.001
    return (res)

def variance(a, esp):
    time = 0
    res = 0

    while (time < 20):
        res += proba(a, time) * math.pow(time - esp, 2)
        time += 0.001
    res = res/1000
    return (res)

def standardDeviation(a, esp):
    var = variance(a, esp)
    std = math.sqrt(var)
    return (std)

def computeDucks(a):
    esp = esperance(a)
    std = standardDeviation(a, esp)
    ducksBack1m = (mProba(a, 1) - mProba(a, 0)) * 100
    ducksBack2m = (mProba(a, 2) - mProba(a, 0)) * 100

    print("Average return time: ", end="")
    print("%dm %.0fs" % (int(esp), (esp - float(int(esp))) * 60))
    print("Standard deviation: ", end="")
    print("%.3f" % std)
    print("Time after which 50% of the ducks are back: ")
    print("Time after which 90% of the ducks are back: ")
    print("Percentage of ducks back after 1 minute: ", end="")
    print("%.1f%%" % (ducksBack1m))
    print("Percentage of ducks back after 2 minute: ", end="")
    print("%.1f%%" % (ducksBack2m))

def checkArg(constArg):
    try:
        a = float(constArg)
    except:
        print("The first argument must me a number")
        sys.exit(84)
    if a < 0 or a > 2.5:
        print("The first argument must be between 0 and 2.5")
        sys.exit(84)

if len(sys.argv) != 2:
    print("You need to set one constant number between 0 and 2.5")
    sys.exit(84)

if (len(sys.argv) == 2 and sys.argv[1] == "-h"):
    print("USAGE")
    print("    ./204ducks a\n")
    print("DESCRIPTION")
    print("    a       constant")
    sys.exit(0)

checkArg(sys.argv[1])
a = float(sys.argv[1])

computeDucks(a)
sys.exit(0)