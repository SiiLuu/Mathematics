#!/usr/bin/env python3

##
## EPITECH PROJECT, 2020
## 208dowels_2019
## File description:
## test
##

import  sys
import  math

def help():
    if sys.argv[1] == "-h":
        print("USAGE")
        print("\t./208dowels O0 O1 O2 O3 O4 O5 O6 O7 O8\n")
        print("DESCRIPTION")
        print("\t0i\tsize of the observed class")
        exit(0)

def errorsHandling():
    if len(sys.argv) != 10:
        exit(84)
    if ((not sys.argv[1].isdigit()) or
        (not sys.argv[2].isdigit()) or
        (not sys.argv[3].isdigit()) or
        (not sys.argv[4].isdigit()) or
        (not sys.argv[5].isdigit()) or
        (not sys.argv[6].isdigit()) or
        (not sys.argv[7].isdigit()) or
        (not sys.argv[8].isdigit()) or
        (not sys.argv[9].isdigit())):
        exit(84)
    if ((int(sys.argv[1]) < 0) or
        (int(sys.argv[2]) < 0) or
        (int(sys.argv[3]) < 0) or
        (int(sys.argv[4]) < 0) or
        (int(sys.argv[5]) < 0) or
        (int(sys.argv[6]) < 0) or
        (int(sys.argv[7]) < 0) or
        (int(sys.argv[8]) < 0) or
        (int(sys.argv[9]) < 0)):
        exit(84)
    if (int(sys.argv[1]) + int(sys.argv[2]) + int(sys.argv[3]) + int(sys.argv[4])
        + int(sys.argv[5]) + int(sys.argv[6]) + int(sys.argv[7]) + int(sys.argv[8])
        + int(sys.argv[9]) != 100):
        exit(84)

TABLE = [[0.00, 0.02, 0.06, 0.15, 0.27, 0.45, 0.71, 1.07, 1.64, 2.71, 3.84, 5.41, 6.63],
        [0.02, 0.21, 0.45, 0.71, 1.02, 1.39, 1.83, 2.41, 3.22, 4.61, 5.99, 7.82, 9.21],
        [0.11, 0.58, 1.01, 1.42, 1.87, 2.37, 2.95, 3.66, 4.64, 6.25, 7.81, 9.84, 11.35],
        [0.30, 1.06, 1.65, 2.19, 2.75, 3.36, 4.04, 4.88, 5.99, 7.78, 9.49, 11.67, 13.28],
        [0.55, 1.61, 2.34, 3.00, 3.66, 4.35, 5.13, 6.06, 7.29, 9.24, 11.07, 13.33, 15.01],
        [0.70, 2.20, 3.07, 3.83, 4.57, 5.35, 6.21, 7.23, 8.56, 10.64, 12.59, 15.03, 16.81],
        [1.24, 2.83, 3.82, 4.67, 5.49, 6.35, 7.28, 8.38, 9.80, 12.02, 14.07, 16.62, 18.48],
        [1.65, 3.49, 4.59, 5.53, 6.42, 7.34, 8.35, 9.52, 11.03, 13.36, 15.51, 18.17, 20.09],
        [2.09, 4.17, 5.38, 6.39, 7.36, 8.34, 9.41, 10.66, 12.24, 14.68, 16.92, 19.63, 21.67],
        [2.56, 4.87, 6.18, 7.27, 8.30, 9.34, 10.47, 11.78, 13.44, 15.99, 18.31, 21.16, 23.21]]

FITS = ['P > 99%', '90% < P < 99%', '80% < P < 90%', '70% < P < 80%', '60% < P < 70%',
        '50% < P < 60%', '40% < P < 50%', '30% < P < 40%', '20% < P < 30%', '10% < P < 20%',
        '5% < P < 10%', '2% < P < 5%', '1% < P < 2%', 'P < 1%']

def computeSquare(Ox):
    compute = [[x] for x in range(9)]
    x = 0

    while (x < len(compute)):
        if sum([Ox[y] for y in compute[x]]) >= 10:
            x += 1
            continue
        if (x + 1 == len(compute)) or (x > 0 and sum([Ox[y] for y in compute[x - 1]])
            < sum(Ox[y] for y in compute[x + 1])):
            compute[x - 1] += compute[x]
            del compute[x]
            x -= 1
        else:
            compute[x] += compute[x + 1]
            del compute[x + 1]
    return (compute)

def body():
    global FITS
    global TABLE
    fit = 0
    Ox = [int(sys.argv[1]), int(sys.argv[2]), int(sys.argv[3]), int(sys.argv[4]),
        int(sys.argv[5]), int(sys.argv[6]), int(sys.argv[7]), int(sys.argv[8]), int(sys.argv[9])]
    computed = sum([i * s for i, s in enumerate(Ox)]) / 10000
    Tx = [100 * math.factorial(100) / (math.factorial(i) * math.factorial(100 - i)) *
        math.pow(computed, i) * math.pow(1 - computed, 100 - i) for i in range(8)]
    Tx.append(100 - sum(Tx))
    a = computeSquare(Ox)
    b = sum([math.pow(sum([Ox[i] - Tx[i] for i in cl]), 2)
        / sum([Tx[i] for i in cl]) for cl in a])
    V = len(a) -2
    string1 = "  x  |"
    string2 = " Ox  |"
    string3 = " Tx  |"
    for x, y in enumerate(TABLE[V - 1]):
        if b < y:
            fit = x
            break
    for i in range(len(a)):
        if (i != len(a) - 1):
            string1 += "  {}\t|".format(a[i][0] if len(a[i]) == 1 else str(a[i][0]) + '-' + str(a[i][len(a[i]) - 1]))
        else:
            string1 += "  {}\t|".format(str(a[i][0]) + '+')
        string2 += "  {}\t|".format(sum([Ox[x] for x in a[i]]))
        string3 += "  {:.1f}\t|".format(sum([Tx[x] for x in a[i]]))
    string1 += "  Total"
    string2 += "  100"
    string3 += "  100"
    print(string1)
    print(string2)
    print(string3)
    print("Distribution:            B(100, {:.4f})".format(computed))
    print("Chi-squared:             {:.3f}".format(b))
    print("Degrees of freedom:      {}".format(V))
    print("Fit validity:            {}".format(FITS[fit]))

def main():
    if  len(sys.argv) == 2:
        help()
    errorsHandling()
    body()

if __name__ == "__main__":
    main()
